name: Dumicola Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Dumicola manual test'
        required: false
        type: boolean
      environment:
        description: 'Test environment'
        type: environment
        required: true

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      CC: ${{ (matrix.c_compiler == 'gcc') && 'gcc-13' || 'clang-18' }}
      CXX: ${{ (matrix.c_compiler == 'g++') && 'g++-13' || 'clang++-18' }}
      BUILD_OFFSET: ${{secrets.BUILD_OFFSET || 0}}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest] #, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          #- os: windows-latest
          #  c_compiler: cl
          #  cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmp_version: 13
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmp_version: 18
        exclude:
          #- os: windows-latest
          #  c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set up compilers
      run: |
        sudo apt-get update
        if [ "${{ matrix.c_compiler }}" == "gcc" ]; then
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 60
        elif [ "${{ matrix.c_compiler }}" == "clang" ]; then
          sudo apt-get install -y wget gnupg
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y clang-18
        fi
    - name: Set build version
      run: >
          echo "CT_BUILD_NO=$(( ${{ github.run_number }} - ${{ env.BUILD_OFFSET }} ))" >> $GITHUB_ENV &&
          echo "CT_MAJOR_NO=$(( ${{ secrets.BUILD_MAJOR }}" )) >> GITHUB_ENV &&
          echo "CT_MINOR_NO=$(( ${{ secrets.BUILD_MINOR }}" )) >> GITHUB_ENV &&
          echo "Build:: $CT_MAJOR_NO:$CT_MINOR_NO:CT_BUILD_NO"

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -S ${{ github.workspace }}/src
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}-${{matrix.cmp_version}}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}-${{matrix.cmp_version}}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_STANDARD=23
        -DCMAKE_C_STANDARD=17
        -DMAJOR_VRS=${{env.CT_MAJOR_NO}}
        -DMINOR_VRS=${{env.CT_MINOR_NO}}
        -DMINOR_VRS=${{env.CT_BUILD_NO}}
        
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: >
        cmake --build ${{ github.workspace }}/build/test &&
        ctest --test-dir ${{ github.workspace }}/build
